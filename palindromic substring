//////////// palindromic substring
input:
n = 5
s = asasd
output: 7
{a,s,a,s,d,asa,sas}

// Complete the substrCount function below.
long substrCount(int n, string s) {

	long count = 0;
	vector<std::pair<char, int>> frequencies;
	int i = 0, j = 0;

	for (i = 0; i < n; i++)
	{
		for (j = i + 1; j < n; j++)
		{
			if (s[j] == s[i])
				continue;
			else
				break;
		}
		frequencies.push_back(std::make_pair(s[i], j - i));
		i = j - 1;
	}

	for (i = 0; i < frequencies.size(); i++)
		count += (frequencies[i].second + 1) * frequencies[i].second / 2;

	for (i = 1; i < frequencies.size() - 1; i++)
	{
		if (frequencies[i].second == 1 && frequencies[i - 1].first == frequencies[i + 1].first)
			count += min(frequencies[i - 1].second, frequencies[i + 1].second);
	}

	return count;
}

int main()
{
	//ofstream fout(getenv("OUTPUT_PATH"));

	int n;
	cin >> n;
	cin.ignore(numeric_limits<streamsize>::max(), '\n');

	string s;
	getline(cin, s);

	long result = substrCount(n, s);

	cout << result << "\n";

	return 0;
}

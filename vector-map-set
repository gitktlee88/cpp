using namespace std;

#define ll long long 
#define fr first
#define sc second
#define MAX ((ll)(1e18+100))
#define MOD ((ll)(1e9+7))
#define HS1 ((ll)(137))
#define HS2 ((ll)(1e9+9))
#define ARRS ((ll)(1e6+900))
#define pb push_back
#define mid ((l+r)>>1)
#define PI 3.14159265358979323846

//#include "pch.h"
#include <vector>
#include <iostream>
#include <algorithm>  // sort
#include <set> // set
#include <map> // map
#include <string>

using namespace std;

bool f(int x, int y)
{
	return x > y;  //descending order
}

void vectorDemo()
{
	vector<int> A = { 11,2,3,14 };
	cout << A[1] << endl;
	sort(A.begin(), A.end()); //O(NlogN)

	//2,3,11,14
	//O(logN)
	bool present = binary_search(A.begin(), A.end(), 3); //true
	present = binary_search(A.begin(), A.end(), 4); //false

	A.push_back(100);
	present = binary_search(A.begin(), A.end(), 100); //true

	//2,3,11,14,100
	A.push_back(100);
	A.push_back(100);
	A.push_back(100);
	A.push_back(100);
	//2,3,11,14,100,100,100,100,100,123
	A.push_back(123);

	//lower_bound returns an iterator pointing to the first element 
	//in the range [first,last) which has a value not less than ‘val’.

	//vector<int>::iterator it = lower_bound(A.begin(), A.end(), 100); // >=
	auto it = lower_bound(A.begin(), A.end(), 100);

	//upper_bound returns an iterator pointing to the first element 
	//in the range [first,last) which has a value greater than ‘val’.

	//vector<int>::iterator it2 = upper_bound(A.begin(), A.end(), 100); // >
	auto it2 = upper_bound(A.begin(), A.end(), 100);

	cout << *it << " " << *it2 << endl;
	cout << it2 - it << endl; //5

	sort(A.begin(), A.end(), f);

	vector<int>::iterator it3;
	for (it3 = A.begin(); it3 != A.end(); it3++)
	{
		cout << *it3 << " ";
	}
	cout << endl;

	for (int &x : A)  // call by reference
	{
		x++;
		cout << x << " ";
	}
	cout << endl;

	for (int x : A)   //call by value
	{
		cout << x << " ";
	}
	cout << endl;
}

void setDemo()
{
	set<int> S;
	S.insert(-1);
	S.insert(2);
	S.insert(1);
	S.insert(-10);

	for (int x : S)
		cout << x << " ";

	cout << endl;

	//-10 -1 1 2
	auto it = S.find(-1);
	if (it == S.end())
	{
		cout << "not present\n";
	}
	else {
		cout << "present\n";
		cout << *it << endl;
	}

	auto it2 = S.lower_bound(-1);
	auto it3 = S.upper_bound(0);
	cout << *it2 << " " << *it3 << endl;

	auto it4 = S.upper_bound(2);
	if (it4 == S.end())
	{
		cout << "oops! sorry cant find something like that\n";
	}

}

void mapDemo()
{
	map<int, int> A;
	A[1] = 100;
	A[2] = -1;
	A[3] = 200;
	A[100000232] = 1;

	map<char, int> cnt;
	string x = "rachit jain";

	for (char c : x) {
		cnt[c]++;
	}

	cout << cnt['a'] << " " << cnt['z'] << endl;
}

void PowerOfStl()
{
	set< pair<int, int> > S;

	S.insert({ 401, 450 });
	S.insert({ 10, 20 });
	S.insert({ 2, 3 });
	S.insert({ 30, 400 });

	//2,3
	//10,20
	//30, 400
	//401, 450

	int point = 50;
	auto it = S.upper_bound({ point, INT_MAX });
	if (it == S.begin())
	{
		cout << "the given point is not lying in any interval..\n";
		return;
	}
	it--;
	pair<int, int> current = *it;
	if (current.first <= point && point <= current.second) {
		cout << "yes its present: " << current.first << " " << current.second << endl;
	}
	else {
		cout << "the given point is not lying in any interval..\n";
	}


}

int main()
{
	//C++ STL
	vectorDemo();
	setDemo();
	mapDemo();
	PowerOfStl();
}



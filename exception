ex8 :: cpp exception handling

#include <stdexcept>

using namespace std;

int largest_proper_divisor(int n) {
	if (n == 0) {
		throw invalid_argument("largest proper divisor is not defined for n=0");
	}
	if (n == 1) {
		throw invalid_argument("largest proper divisor is not defined for n=1");
	}
	for (int i = n / 2; i >= 1; --i) {
		if (n % i == 0) {
			return i;
		}
	}
	return -1; // will never happen
}

void process_input(int n) {
	try {
		int d = largest_proper_divisor(n);
		cout << "result=" << d << endl;
	}
	catch (const std::invalid_argument& e) { std::cerr << e.what() << std::endl; }
	
	cout << "returning control flow to caller" << endl;
	
}

int main() {
	int n;
	//cin >> n;
	scanf_s("%d", &n);
	process_input(n);
	return 0;
}


/////////////
ex9 :: operator overloading  <<, >>

class Person {
public:
	Person(const string& first_name, const string& last_name) : first_name_(first_name), last_name_(last_name) {}
	const string& get_first_name() const {
		return first_name_;
	}
	const string& get_last_name() const {
		return last_name_;
	}
private:
	string first_name_;
	string last_name_;
};
// Enter your code here.
ostream& operator<<(ostream& out, const Person& p) {
	out << "first_name=" << p.get_first_name() << ",last_name=" << p.get_last_name();
	return out;
}


int main() {
	string first_name, last_name, event;
	cin >> first_name >> last_name >> event;
	auto p = Person(first_name, last_name);
	cout << p << " " << event << endl;
	return 0;
}


////// descending sort
int main() {

	int arr[] = { 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };
	int n = sizeof(arr) / sizeof(arr[0]);
	sort(arr, arr + n, greater<int>());

	cout << "Array after sorting : \n";
	for (int i = 0; i < n; ++i)
		cout << arr[i] << " ";

	return 0;
}


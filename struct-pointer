ex5 :: struct comparator

//#include <utility>      // std::pair, std::make_pair
#include <string>       // std::string
#include <iostream>     // std::cout
#include <vector>       // std::vector
#include <cstdio>
#include <algorithm>

using namespace std;

struct Interval
{
	int start;
	string end;
};

// Compares two intervals according to starting times. 

bool compareInterval(Interval i1, Interval i2)
{
	return (i1.start < i2.start);
}

int main()
{
	Interval arr[] = { {6,"ab"}, {1,"cd"}, {2,"ef"}, {4,"gh"} };
	int n = sizeof(arr) / sizeof(arr[0]);

	// sort the intervals in increasing order of 'start' time 
	sort(arr, arr + n, compareInterval);

	cout << "Intervals sorted by start time : \n";
	for (int i = 0; i < n; i++)
		cout << "[" << arr[i].start << "," << arr[i].end
		<< "] ";

		
	/// vector pair example ///
	vector<pair<int, string>> vpair;
	int i = 0, j = 0;

	for (i; i < 3; i++) {
		vpair.push_back(make_pair(i, "abc"));
	}

	for (i=0; i < 3; i++) {
		cout << endl << vpair[i].first << " " << vpair[i].second;
	}		
	
	///// test with vector /////
	vector<Interval> varr = { {6,"ab"}, {1,"cd"}, {2,"ef"}, {4,"gh"} };

	Interval tObj;
	tObj.start = 8;
	tObj.end = "test";

	varr.push_back(tObj);

	cout << "Intervals sorted by start time : \n ";
	for (int i = 0; i < 5; i++)
		cout << "[" << varr[i].start << "," << arr[i].end
		<< "] ";


	return 0;
}

///////////////
ex6 :: pointer

void update(int *a, int *b) {
	// Complete this function    
	int tmp;
	tmp = *a + *b;
	*b = abs(*a - *b);
	*a = tmp;
}

int main() {
	int a, b;
	cin >> a >> b;
	update(&a, &b);
	cout << a << abs(b);
	return 0;
}
